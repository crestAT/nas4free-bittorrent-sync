<?php/*  * btsync.php * created 2013 by Andreas Schmidhuber */require("auth.inc");require("guiconfig.inc");$pgtitle = array(gettext("Extensions"), $config['btsync']['appname']." ".$config['btsync']['version']);if ( !isset( $config['btsync']['rootfolder']) && !is_dir( $config['btsync']['rootfolder'] )) {	$input_errors[] = "Extension installed with fault";} if (!isset($config['btsync']) || !is_array($config['btsync'])) $config['btsync'] = array();$pconfig['enable'] = isset($config['btsync']['enable']);$pconfig['who'] = !empty($config['btsync']['who']) ? $config['btsync']['who'] : "";$pconfig['if'] = !empty($config['btsync']['if']) ? $config['btsync']['if'] : "";$pconfig['ipaddr'] = !empty($config['btsync']['ipaddr']) ? $config['btsync']['ipaddr'] : "";$pconfig['port'] = !empty($config['btsync']['port']) ? $config['btsync']['port'] : "8888";/**  * Clean comments of json content and decode it with json_decode().  * Work like the original php json_decode() function with the same params  *  * @param   string  $json    The json string being decoded  * @param   bool    $assoc   When TRUE, returned objects will be converted into associative arrays.  * @param   integer $depth   User specified recursion depth. (>=5.3)  * @param   integer $options Bitmask of JSON decode options. (>=5.4)  * @return  string  */ function json_clean_decode($json, $assoc = false, $depth = 512, $options = 0) {    // search and remove comments like /* */ and //    $json = preg_replace("#(/\*([^*]|[\r\n]|(\*+([^*/]|[\r\n])))*\*+/)|([\s\t]//.*)|(^//.*)#", '', $json);        if(version_compare(phpversion(), '5.4.0', '>=')) {        $json = json_decode($json, $assoc, $depth, $options);    }    elseif(version_compare(phpversion(), '5.3.0', '>=')) {        $json = json_decode($json, $assoc, $depth);    }    else {        $json = json_decode($json, $assoc);    }    return $json;}if ($_POST) {    unset($input_errors);    $pconfig = $_POST;/* input validation *//*    if (isset($_POST['enable']) && $_POST['enable']) {		$reqdfields = explode(" ", "provider domainname username password");		$reqdfieldsn = array(gettext("Provider"), gettext("Domain name"), gettext("Username"), gettext("Password"));		do_input_validation($_POST, $reqdfields, $reqdfieldsn, $input_errors);		$reqdfields = array_merge($reqdfields, explode(" ", "updateperiod forcedupdateperiod"));		$reqdfieldsn = array_merge($reqdfieldsn, array(gettext("Update period"),gettext("Forced update period")));		$reqdfieldst = explode(" ", "string string string string numeric numeric");		do_input_validation_type($_POST, $reqdfields, $reqdfieldsn, $reqdfieldst, $input_errors);	} */	if (empty($input_errors)) {        if (isset($_POST['Submit']) && ($_POST['Submit'] === gettext("Save and Restart"))) {            $config['btsync']['enable'] = isset($_POST['enable']) ? true : false;            $config['btsync']['who'] = $_POST['who'];            $config['btsync']['if'] = $_POST['if'];            $config['btsync']['ipaddr'] = get_ipaddr($_POST['if']);            $config['btsync']['port'] = $_POST['port'];			$config['btsync']['command'] = "su {$config['btsync']['who']} -c '{$config['btsync']['rootfolder']}btsync --config {$config['btsync']['rootfolder']}sync.conf'";    		$savemsg = get_std_save_message(write_config());            $sync_conf['storage_path'] = !empty($_POST['storage_path']) ? $_POST['storage_path'] : $config['btsync']['rootfolder'].".sync/";            $sync_conf['pid_file'] = !empty($_POST['pid_file']) ? $_POST['pid_file'] : $sync_conf['storage_path']."sync.pid";            $sync_conf['webui']['listen'] = $config['btsync']['ipaddr'].':'.$config['btsync']['port'];            $sync_conf['disk_low_priority'] = isset($_POST['disk_low_priority']) ? true : false;            $sync_conf['folder_rescan_interval'] = (is_numeric($_POST['folder_rescan_interval']) ? (int)$_POST['folder_rescan_interval'] : 600);            $sync_conf['lan_encrypt_data'] = isset($_POST['lan_encrypt_data']) ? true : false;            $sync_conf['lan_use_tcp'] = isset($_POST['lan_use_tcp']) ? true : false;            $sync_conf['max_file_size_diff_for_patching'] = (is_numeric($_POST['max_file_size_diff_for_patching']) ? (int)$_POST['max_file_size_diff_for_patching'] : 1000);            $sync_conf['max_file_size_for_versioning'] = (is_numeric($_POST['max_file_size_for_versioning']) ? (int)$_POST['max_file_size_for_versioning'] : 1000);            $sync_conf['rate_limit_local_peers'] = isset($_POST['rate_limit_local_peers']) ? true : false;            $sync_conf['recv_buf_size'] = (is_numeric($_POST['recv_buf_size']) ? (int)$_POST['recv_buf_size'] : 5);            $sync_conf['send_buf_size'] = (is_numeric($_POST['send_buf_size']) ? (int)$_POST['send_buf_size'] : 5);            $sync_conf['sync_max_time_diff'] = (is_numeric($_POST['sync_max_time_diff']) ? (int)$_POST['sync_max_time_diff'] : 600);            $sync_conf['sync_trash_ttl'] = (is_numeric($_POST['sync_trash_ttl']) ? (int)$_POST['sync_trash_ttl'] : 30);            file_put_contents($config['btsync']['rootfolder']."sync.conf", json_encode($sync_conf, JSON_PRETTY_PRINT + JSON_UNESCAPED_SLASHES ));            if (json_last_error() > 0) { $input_errors[] = gettext('Error during encoding/writing sync.conf file with error number: ').json_last_error(); };			if (isset($config['btsync']['enable'])) {                exec("killall btsync");                $return_val = 0;                while( $return_val == 0 ) { sleep(1); exec('ps acx | grep btsync', $output, $return_val); }                exec($config['btsync']['command']);// if cronjobs exists -> activate                if (isset($config['btsync']['enable_schedule'])) {                    $cronjob = array();                    $a_cronjob = &$config['cron']['job'];                    $uuid = isset($config['btsync']['schedule_uuid_startup']) ? $config['btsync']['schedule_uuid_startup'] : false;                    if (isset($uuid) && (FALSE !== ($cnid = array_search_ex($uuid, $a_cronjob, "uuid")))) {                    	$cronjob['enable'] = true;                    	$cronjob['uuid'] = $a_cronjob[$cnid]['uuid'];                    	$cronjob['desc'] = $a_cronjob[$cnid]['desc'];                    	$cronjob['minute'] = $a_cronjob[$cnid]['minute'];                    	$cronjob['hour'] = $config['btsync']['schedule_startup'];                    	$cronjob['day'] = $a_cronjob[$cnid]['day'];                    	$cronjob['month'] = $a_cronjob[$cnid]['month'];                    	$cronjob['weekday'] = $a_cronjob[$cnid]['weekday'];                    	$cronjob['all_mins'] = $a_cronjob[$cnid]['all_mins'];                    	$cronjob['all_hours'] = $a_cronjob[$cnid]['all_hours'];                    	$cronjob['all_days'] = $a_cronjob[$cnid]['all_days'];                    	$cronjob['all_months'] = $a_cronjob[$cnid]['all_months'];                    	$cronjob['all_weekdays'] = $a_cronjob[$cnid]['all_weekdays'];                    	$cronjob['who'] = $a_cronjob[$cnid]['who'];                    	$cronjob['command'] = $a_cronjob[$cnid]['command'];                    }                    if (isset($uuid) && (FALSE !== $cnid)) {                    		$a_cronjob[$cnid] = $cronjob;                    		$mode = UPDATENOTIFY_MODE_MODIFIED;                    	} else {                    		$a_cronjob[] = $cronjob;                    		$mode = UPDATENOTIFY_MODE_NEW;                    	}                    updatenotify_set("cronjob", $mode, $cronjob['uuid']);                    write_config();                    unset ($cronjob);                    $cronjob = array();                    $a_cronjob = &$config['cron']['job'];                    $uuid = isset($config['btsync']['schedule_uuid_closedown']) ? $config['btsync']['schedule_uuid_closedown'] : false;                    if (isset($uuid) && (FALSE !== ($cnid = array_search_ex($uuid, $a_cronjob, "uuid")))) {                    	$cronjob['enable'] = true;                    	$cronjob['uuid'] = $a_cronjob[$cnid]['uuid'];                    	$cronjob['desc'] = $a_cronjob[$cnid]['desc'];                    	$cronjob['minute'] = $a_cronjob[$cnid]['minute'];                    	$cronjob['hour'] = $config['btsync']['schedule_closedown'];                    	$cronjob['day'] = $a_cronjob[$cnid]['day'];                    	$cronjob['month'] = $a_cronjob[$cnid]['month'];                    	$cronjob['weekday'] = $a_cronjob[$cnid]['weekday'];                    	$cronjob['all_mins'] = $a_cronjob[$cnid]['all_mins'];                    	$cronjob['all_hours'] = $a_cronjob[$cnid]['all_hours'];                    	$cronjob['all_days'] = $a_cronjob[$cnid]['all_days'];                    	$cronjob['all_months'] = $a_cronjob[$cnid]['all_months'];                    	$cronjob['all_weekdays'] = $a_cronjob[$cnid]['all_weekdays'];                    	$cronjob['who'] = $a_cronjob[$cnid]['who'];                    	$cronjob['command'] = $a_cronjob[$cnid]['command'];                    }                    if (isset($uuid) && (FALSE !== $cnid)) {                    		$a_cronjob[$cnid] = $cronjob;                    		$mode = UPDATENOTIFY_MODE_MODIFIED;                    	} else {                    		$a_cronjob[] = $cronjob;                    		$mode = UPDATENOTIFY_MODE_NEW;                    	}                    updatenotify_set("cronjob", $mode, $cronjob['uuid']);                    write_config();                    header("Location: btsync.php");            		$retval = 0;            		if (!file_exists($d_sysrebootreqd_path)) {            			$retval |= updatenotify_process("cronjob", "cronjob_process_updatenotification");            			config_lock();            			$retval |= rc_update_service("cron");            			config_unlock();            		}            		$savemsg = get_std_save_message($retval);            		if ($retval == 0) {            			updatenotify_delete("cronjob");            		}                }// end of activate cronjobs            }			else {                 exec("killall btsync"); $savemsg = $savemsg." ".$config['btsync']['appname']." is now disabled!"; // if cronjobs exists -> deactivate                if (isset($config['btsync']['enable_schedule'])) {                    $cronjob = array();                    $a_cronjob = &$config['cron']['job'];                    $uuid = isset($config['btsync']['schedule_uuid_startup']) ? $config['btsync']['schedule_uuid_startup'] : false;                    if (isset($uuid) && (FALSE !== ($cnid = array_search_ex($uuid, $a_cronjob, "uuid")))) {                    	$cronjob['enable'] = false;                    	$cronjob['uuid'] = $a_cronjob[$cnid]['uuid'];                    	$cronjob['desc'] = $a_cronjob[$cnid]['desc'];                    	$cronjob['minute'] = $a_cronjob[$cnid]['minute'];                    	$cronjob['hour'] = $config['btsync']['schedule_startup'];                    	$cronjob['day'] = $a_cronjob[$cnid]['day'];                    	$cronjob['month'] = $a_cronjob[$cnid]['month'];                    	$cronjob['weekday'] = $a_cronjob[$cnid]['weekday'];                    	$cronjob['all_mins'] = $a_cronjob[$cnid]['all_mins'];                    	$cronjob['all_hours'] = $a_cronjob[$cnid]['all_hours'];                    	$cronjob['all_days'] = $a_cronjob[$cnid]['all_days'];                    	$cronjob['all_months'] = $a_cronjob[$cnid]['all_months'];                    	$cronjob['all_weekdays'] = $a_cronjob[$cnid]['all_weekdays'];                    	$cronjob['who'] = $a_cronjob[$cnid]['who'];                    	$cronjob['command'] = $a_cronjob[$cnid]['command'];                    }                     if (isset($uuid) && (FALSE !== $cnid)) {                    		$a_cronjob[$cnid] = $cronjob;                    		$mode = UPDATENOTIFY_MODE_MODIFIED;                    	} else {                    		$a_cronjob[] = $cronjob;                    		$mode = UPDATENOTIFY_MODE_NEW;                    	}                    updatenotify_set("cronjob", $mode, $cronjob['uuid']);                    write_config();                            unset ($cronjob);                    $cronjob = array();                    $a_cronjob = &$config['cron']['job'];                    $uuid = isset($config['btsync']['schedule_uuid_closedown']) ? $config['btsync']['schedule_uuid_closedown'] : false;                    if (isset($uuid) && (FALSE !== ($cnid = array_search_ex($uuid, $a_cronjob, "uuid")))) {                    	$cronjob['enable'] = false;                    	$cronjob['uuid'] = $a_cronjob[$cnid]['uuid'];                    	$cronjob['desc'] = $a_cronjob[$cnid]['desc'];                    	$cronjob['minute'] = $a_cronjob[$cnid]['minute'];                    	$cronjob['hour'] = $config['btsync']['schedule_closedown'];                    	$cronjob['day'] = $a_cronjob[$cnid]['day'];                    	$cronjob['month'] = $a_cronjob[$cnid]['month'];                    	$cronjob['weekday'] = $a_cronjob[$cnid]['weekday'];                    	$cronjob['all_mins'] = $a_cronjob[$cnid]['all_mins'];                    	$cronjob['all_hours'] = $a_cronjob[$cnid]['all_hours'];                    	$cronjob['all_days'] = $a_cronjob[$cnid]['all_days'];                    	$cronjob['all_months'] = $a_cronjob[$cnid]['all_months'];                    	$cronjob['all_weekdays'] = $a_cronjob[$cnid]['all_weekdays'];                    	$cronjob['who'] = $a_cronjob[$cnid]['who'];                    	$cronjob['command'] = $a_cronjob[$cnid]['command'];                    }                     if (isset($uuid) && (FALSE !== $cnid)) {                    		$a_cronjob[$cnid] = $cronjob;                    		$mode = UPDATENOTIFY_MODE_MODIFIED;                    	} else {                    		$a_cronjob[] = $cronjob;                    		$mode = UPDATENOTIFY_MODE_NEW;                    	}                    updatenotify_set("cronjob", $mode, $cronjob['uuid']);                    write_config();                    header("Location: btsync.php");                    		$retval = 0;            		if (!file_exists($d_sysrebootreqd_path)) {            			$retval |= updatenotify_process("cronjob", "cronjob_process_updatenotification");            			config_lock();            			$retval |= rc_update_service("cron");            			config_unlock();            		}            		$savemsg = get_std_save_message($retval);            		if ($retval == 0) {            			updatenotify_delete("cronjob");            		}                }   // end of deactivate cronjobs            }    	}    }}if (is_file($config['btsync']['rootfolder']."sync.conf")) {    $sync_conf = file_get_contents($config['btsync']['rootfolder']."sync.conf");    $sync_conf = utf8_encode($sync_conf);    $sync_conf = json_clean_decode($sync_conf,true);//$savemsg = 'JSON state: '.json_last_error().' sync.conf value:'.' fri= '.$sync_conf['folder_rescan_interval'];    }$pconfig['storage_path'] = !empty($sync_conf['storage_path']) ? $sync_conf['storage_path'] : $config['btsync']['rootfolder'].".sync/";$pconfig['pid_file'] = !empty($sync_conf['pid_file']) ? $sync_conf['pid_file'] : $pconfig['storage_path']."sync.pid";$pconfig['disk_low_priority'] = isset($sync_conf['disk_low_priority']) ? $sync_conf['disk_low_priority'] : true;$pconfig['folder_rescan_interval'] = !empty($sync_conf['folder_rescan_interval']) ? $sync_conf['folder_rescan_interval'] : 600;$pconfig['lan_encrypt_data'] = isset($sync_conf['lan_encrypt_data']) ? $sync_conf['lan_encrypt_data'] : true;$pconfig['lan_use_tcp'] = isset($sync_conf['lan_use_tcp']) ? $sync_conf['lan_use_tcp'] : false;$pconfig['max_file_size_diff_for_patching'] = !empty($sync_conf['max_file_size_diff_for_patching']) ? $sync_conf['max_file_size_diff_for_patching'] : 1000;$pconfig['max_file_size_for_versioning'] = !empty($sync_conf['max_file_size_for_versioning']) ? $sync_conf['max_file_size_for_versioning'] : 1000;$pconfig['rate_limit_local_peers'] = isset($sync_conf['rate_limit_local_peers']) ? $sync_conf['rate_limit_local_peers'] : false;$pconfig['recv_buf_size'] = !empty($sync_conf['recv_buf_size']) ? $sync_conf['recv_buf_size'] : 5;$pconfig['send_buf_size'] = !empty($sync_conf['send_buf_size']) ? $sync_conf['send_buf_size'] : 5;$pconfig['sync_max_time_diff'] = !empty($sync_conf['sync_max_time_diff']) ? $sync_conf['sync_max_time_diff'] : 600;$pconfig['sync_trash_ttl'] = !empty($sync_conf['sync_trash_ttl']) ? $sync_conf['sync_trash_ttl'] : 30;$a_interface = get_interface_list();// Use first interface as default if it is not set.if (empty($pconfig['if']) && is_array($a_interface)) $pconfig['if'] = key($a_interface);function get_process_info() {    if (exec('ps acx | grep btsync')) { $state = '<a style=" background-color: #00ff00; ">&nbsp;&nbsp;<b>running</b>&nbsp;&nbsp;</a>'; }    else { $state = '<a style=" background-color: #ff0000; ">&nbsp;&nbsp;<b>stopped</b>&nbsp;&nbsp;</a>'; }	return ($state);}if (is_ajax()) {	$procinfo = get_process_info();	render_ajax($procinfo);}include("fbegin.inc");?>  <script type="text/javascript">//<![CDATA[$(document).ready(function(){	var gui = new GUI;	gui.recall(0, 2000, 'btsync.php', null, function(data) {		$('#procinfo').html(data.data);	});});//]]></script><script type="text/javascript"><!--function enable_change(enable_change) {	var endis = !(document.iform.enable.checked || enable_change);	document.iform.who.disabled = endis;	document.iform.port.disabled = endis;    document.iform.pid_file.disabled = endis;	document.iform.pid_filebrowsebtn.disabled = endis;	document.iform.storage_path.disabled = endis;	document.iform.storage_pathbrowsebtn.disabled = endis;	document.iform.disk_low_priority.disabled = endis;	document.iform.folder_rescan_interval.disabled = endis;	document.iform.xif.disabled = endis;	document.iform.lan_encrypt_data.disabled = endis;	document.iform.lan_use_tcp.disabled = endis;	document.iform.max_file_size_diff_for_patching.disabled = endis;	document.iform.max_file_size_for_versioning.disabled = endis;	document.iform.rate_limit_local_peers.disabled = endis;	document.iform.recv_buf_size.disabled = endis;	document.iform.send_buf_size.disabled = endis;	document.iform.sync_max_time_diff.disabled = endis;	document.iform.sync_trash_ttl.disabled = endis;}//--></script><form action="btsync.php" method="post" name="iform" id="iform">    <table width="100%" border="0" cellpadding="0" cellspacing="0">	<tr><td class="tabnavtbl">		<ul id="tabnav">			<li class="tabact"><a href="btsync.php"><span><?=gettext("Configuration");?></span></a></li>			<li class="tabinact"><a href="btsync_update.php"><span><?=gettext("Maintenance");?></span></a></li>			<li class="tabinact"><a href="btsync_log.php"><span><?=gettext("Log");?></span></a></li>		</ul>	</td></tr>    <tr><td class="tabcont">        <?php if (!empty($input_errors)) print_input_errors($input_errors);?>        <?php if (!empty($savemsg)) print_info_box($savemsg);?>        <table width="100%" border="0" cellpadding="6" cellspacing="0">			<?php html_titleline($config['btsync']['appname']." ".gettext("Information"));?>			<?php html_text("version", gettext("Version"), $config['btsync']['product_version']);?>			<?php html_text("architecture", gettext("Architecture"), $config['btsync']['architecture']);?>		            <tr>                <td class="vncell"><?=gettext("Status");?></td>                <td class="vtable"><span name="procinfo" id="procinfo"></span></td>            </tr>            <?php                $if = get_ifname($pconfig['if']);                $ipaddr = get_ipaddr($if);                $url = htmlspecialchars("http://{$ipaddr}:{$pconfig['port']}");                $text = "<a href='{$url}' target='_blank'>{$url}</a>";                html_text("url", gettext("WebGUI")." ".gettext("URL"), $text);            ?>			<?php html_separator();?>        	<?php html_titleline_checkbox("enable", $config['btsync']['appname'], !empty($pconfig['enable']) ? true : false, gettext("Enable"), "enable_change(false)");?>    		<?php $a_user = array(); foreach (system_get_user_list() as $userk => $userv) { $a_user[$userk] = htmlspecialchars($userk); }?>            <?php html_combobox("who", gettext("Username"), $pconfig['who'], $a_user, gettext("Specifies the username which the service will run as."), true);?>			<tr>				<td valign="top" class="vncellreq"><?=gettext("Interface selection");?></td>				<td class="vtable">				<select name="if" class="formfld" id="xif">					<?php foreach($a_interface as $if => $ifinfo):?>						<?php $ifinfo = get_interface_info($if); if (("up" == $ifinfo['status']) || ("associated" == $ifinfo['status'])):?>						<option value="<?=$if;?>"<?php if ($if == $pconfig['if']) echo "selected=\"selected\"";?>><?=$if?></option>						<?php endif;?>					<?php endforeach;?>				</select>				<br /><?=gettext("Select which interface to use. (only selectable if your server has more than one)");?>				</td>			</tr>			<?php html_inputbox("port", gettext("WebGUI")." ".gettext("Port"), $pconfig['port'], sprintf(gettext("Port to listen on. Only dynamic or private ports can be used (from %d through %d). Default port is %d."), 1025, 65535, 8888), true, 5);?>			<?php html_filechooser("storage_path", gettext("Storage path"), $pconfig['storage_path'], gettext("Where to save auxilliary app files."), $g['media_path'], false, 60);?>			<?php html_filechooser("pid_file", gettext("PID file"), $pconfig['pid_file'], gettext("Where to save the pid file."), $g['media_path'], false, 60);?>			<?php html_separator();?>			<?php html_titleline(gettext("Advanced settings"));?>            <?php html_checkbox("disk_low_priority", gettext("disk_low_priority"), $pconfig['disk_low_priority'], gettext("Sets priority for the file operations on disc."), "Default is true.", false);?>            <?php html_inputbox("folder_rescan_interval", gettext("folder_rescan_interval"), $pconfig['folder_rescan_interval'], sprintf(gettext("Sets a time interval for rescanning sync. Default is %d seconds."), 600), false, 5);?>            <?php html_checkbox("lan_encrypt_data", gettext("lan_encrypt_data"), $pconfig['lan_encrypt_data'], gettext("If set to true, will use encryption in the local network."), "Default is true.", false);?>            <?php html_checkbox("lan_use_tcp", gettext("lan_use_tcp"), $pconfig['lan_use_tcp'], gettext("If set to true, Sync will use TCP instead of UDP in local network."), "Default is false.", false);?>            <?php html_inputbox("max_file_size_diff_for_patching", gettext("max_file_size_diff_for_patching"), $pconfig['max_file_size_diff_for_patching'], sprintf(gettext("Determines a size difference between versions of one file for patching. Default is %d MB."), 1000), false, 5);?>            <?php html_inputbox("max_file_size_for_versioning", gettext("max_file_size_for_versioning"), $pconfig['max_file_size_for_versioning'], sprintf(gettext("Determines maximum file size for creating file versions. Default is %d MB."), 1000), false, 5);?>            <?php html_checkbox("rate_limit_local_peers", gettext("rate_limit_local_peers"), $pconfig['rate_limit_local_peers'], gettext("Applies speed limits to the peers in local network."), "Default is false.", false);?>            <?php html_inputbox("recv_buf_size", gettext("recv_buf_size"), $pconfig['recv_buf_size'], sprintf(gettext("The amount of real memory that will be used for cached receive operations, can be set in the range from %d to %d MB. Default is %d MB."), 1, 100, 5), false, 5);?>            <?php html_inputbox("send_buf_size", gettext("send_buf_size"), $pconfig['send_buf_size'], sprintf(gettext("The amount of real memory that will be used for cached send operations, can be set in the range from %d to %d MB. Default is %d MB."), 1, 100, 5), false, 5);?>            <?php html_inputbox("sync_max_time_diff", gettext("sync_max_time_diff"), $pconfig['sync_max_time_diff'], sprintf(gettext("Maximum allowed time difference between devices. Default is %d seconds."), 600), false, 5);?>            <?php html_inputbox("sync_trash_ttl", gettext("sync_trash_ttl"), $pconfig['sync_trash_ttl'], sprintf(gettext("Sets the number of days after reaching which files will be automatically deleted from the .SyncArchive folder. Default is %d days."), 30), false, 5);?>        </table>        <div id="remarks">            <?php html_remark("note", gettext("Note"), sprintf(gettext("These parameters will be added to %s."), "sync.conf")." ".sprintf(gettext("Please check the <a href='%s' target='_blank'>documentation</a>."), "http://btsync.s3-website-us-east-1.amazonaws.com/BitTorrentSyncUserGuide.pdf"));?>        </div>        <div id="submit">			<input name="Submit" type="submit" class="formbtn" value="<?=gettext("Save and Restart");?>" onclick="enable_change(true)" />        </div>	</td></tr>	</table>	<?php include("formend.inc");?></form><script type="text/javascript"><!--enable_change(false);//--></script><?php include("fend.inc");?>